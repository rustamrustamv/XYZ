# monitoring-stack.yaml
# ------------------------------------------------------------
apiVersion: v1
kind: Namespace
metadata:
  name: monitoring
---
# ----------- Node Exporter ---------------------------------------------------
apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: node-exporter
  namespace: monitoring
  labels: { app: node-exporter }
spec:
  selector:
    matchLabels: { app: node-exporter }
  template:
    metadata:
      labels: { app: node-exporter }
    spec:
      hostPID: true
      hostNetwork: true
      tolerations:       # so it runs on control-plane nodes too
      - operator: Exists
      containers:
      - name: node-exporter
        image: prom/node-exporter:v1.8.1
        args:
          - '--path.rootfs=/host'
        securityContext:
          privileged: true
        ports:
        - name: metrics
          containerPort: 9100
          hostPort: 9100
        volumeMounts:
        - name: host
          mountPath: /host
          readOnly: true
      volumes:
      - name: host
        hostPath:
          path: /
---
# ----------- Prometheus configuration ---------------------------------------
apiVersion: v1
kind: ConfigMap
metadata:
  name: prometheus-cfg
  namespace: monitoring
data:
  prometheus.yml: |
    global:
      scrape_interval: 15s
      evaluation_interval: 15s
    scrape_configs:
      # Scrape Prometheus itself
      - job_name: prometheus
        static_configs:
        - targets: ['localhost:9090']
      # Scrape every Node Exporter
      - job_name: node-exporter
        static_configs:
        - targets:
          - 'localhost:9100'      # MicroK8s single-node â€“ one target is enough
    # You can add more jobs later for kube-state-metrics, application pods, etc.
---
# ----------- Prometheus (single-pod) ----------------------------------------
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: prometheus
  namespace: monitoring
spec:
  serviceName: prometheus
  replicas: 1
  selector:
    matchLabels: { app: prometheus }
  template:
    metadata:
      labels: { app: prometheus }
    spec:
      containers:
      - name: prometheus
        image: prom/prometheus:v2.52.0
        args:
          - '--config.file=/etc/prometheus/prometheus.yml'
          - '--storage.tsdb.path=/prometheus'
        ports:
        - name: web
          containerPort: 9090
        volumeMounts:
        - name: config
          mountPath: /etc/prometheus
        - name: data
          mountPath: /prometheus
      volumes:
      - name: config
        configMap:
          name: prometheus-cfg
  volumeClaimTemplates:
  - metadata:
      name: data
    spec:
      accessModes: [ "ReadWriteOnce" ]
      resources:
        requests:
          storage: 1Gi
---
# ----------- Service (NodePort 30090) ---------------------------------------
apiVersion: v1
kind: Service
metadata:
  name: prometheus
  namespace: monitoring
spec:
  type: NodePort
  selector: { app: prometheus }
  ports:
  - name: web
    port: 9090
    targetPort: 9090
    nodePort: 30090
